name: Build and Push Images

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'docker/**'
      - 'frontend/**'
      - 'requirements*.txt'
      - 'helm/**'
      - '.github/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        service:
          - name: task-generator
            dockerfile: docker/Dockerfile.task-generator
            context: .
          - name: task-solver
            dockerfile: docker/Dockerfile.task-solver
            context: .
          - name: chat-interface
            dockerfile: docker/Dockerfile.chat-interface
            context: .

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup Node.js (for chat-interface only)
      if: matrix.service.name == 'chat-interface'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package.json

    - name: Validate frontend structure (for chat-interface only)
      if: matrix.service.name == 'chat-interface'
      run: |
        echo "üìã Validating frontend structure..."
        ls -la frontend/
        test -f frontend/package.json
        test -f frontend/src/main.jsx
        test -f frontend/src/ChatInterface.jsx
        echo "‚úÖ Frontend structure validated"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  deploy-to-k8s:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
        role-to-assume: arn:aws:iam::216989110335:role/OrganizationAccountAccessRole
        role-session-name: GitHubActionsDeployment
        disable-retry: true
        role-skip-session-tagging: true
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-east-2 --name my-small-cluster
    
    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'
    
    - name: Setup Helm repositories
      run: |
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo update
        cd helm
        helm dependency update
        cd ..
    
    - name: Clean up previous deployment
      run: |
        echo "üßπ Cleaning up previous deployment..."
        
        # Remove existing Helm releases from both namespaces
        helm uninstall langgraph-kafka -n langgraph --ignore-not-found || true
        helm uninstall langgraph-kafka -n langgraph-system --ignore-not-found || true
        
        # Delete namespaces to ensure completely clean state
        kubectl delete namespace langgraph --ignore-not-found --timeout=120s || true
        kubectl delete namespace langgraph-system --ignore-not-found --timeout=120s || true
        
        # Wait for namespace deletion to complete
        echo "‚è≥ Waiting for namespace cleanup..."
        sleep 30
        
        # Force cleanup any remaining serviceaccounts in specific namespaces
        kubectl delete serviceaccounts langgraph-kafka -n langgraph --ignore-not-found || true
        kubectl delete serviceaccounts langgraph-kafka -n langgraph-system --ignore-not-found || true
        kubectl delete serviceaccounts langgraph-kafka-provisioning -n langgraph --ignore-not-found || true
        kubectl delete serviceaccounts langgraph-kafka-provisioning -n langgraph-system --ignore-not-found || true
        
        echo "‚úÖ Cleanup completed"
    
    - name: Deploy to Kubernetes
      run: |
        echo "üöÄ Starting clean deployment..."
        
        # Extract short SHA for image tag
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        
        # Create namespaces if they don't exist
        kubectl create namespace langgraph --dry-run=client -o yaml | kubectl apply -f -
        kubectl create namespace langgraph-system --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy external Kafka first
        echo "üì¶ Deploying external Kafka..."
        helm upgrade --install langgraph-system-kafka bitnami/kafka \
          --namespace langgraph-system \
          --set persistence.enabled=false \
          --set controller.persistence.enabled=false \
          --set kraft.enabled=true \
          --set zookeeper.enabled=false \
          --set auth.clientProtocol=plaintext \
          --set auth.interBrokerProtocol=plaintext \
          --set auth.sasl.mechanisms="" \
          --set listeners.client.protocol=PLAINTEXT \
          --wait --timeout=300s
        
        echo "‚úÖ External Kafka deployed"
        
        # Wait for external Kafka to be ready before deploying main app
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=kafka -n langgraph-system --timeout=300s
        
        # Use upgrade --install to handle existing resources
        helm upgrade --install langgraph-kafka ./helm \
          --namespace langgraph \
          --values helm/values-dev.yaml \
          --set taskGenerator.image.repository=ghcr.io/${{ github.repository }}/task-generator \
          --set taskGenerator.image.tag=main-${SHORT_SHA} \
          --set taskSolver.image.repository=ghcr.io/${{ github.repository }}/task-solver \
          --set taskSolver.image.tag=main-${SHORT_SHA} \
          --set chatInterface.image.repository=ghcr.io/${{ github.repository }}/chat-interface \
          --set chatInterface.image.tag=main-${SHORT_SHA} \
          --set env.openaiApiKey="${{ secrets.OPENAI_API_KEY }}" \
          --set env.langchainTracing="true" \
          --set env.langchainEndpoint="https://api.smith.langchain.com" \
          --set env.langchainApiKey="${{ secrets.LANGCHAIN_API_KEY }}" \
          --set env.langsmithApiKey="${{ secrets.LANGSMITH_API_KEY }}" \
          --set env.kafkaBootstrapServers="langgraph-system-kafka.langgraph-system.svc.cluster.local:9092" \
          --set env.kafkaTopic="dev-langgraph-agent-events" \
          --set env.kafkaResultsTopic="dev-langgraph-task-results" \
          --set env.disableCheckpointer="true" \
          --timeout 600s
          
        echo "‚úÖ Deployment completed"
    
    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=langgraph-kafka -n langgraph --timeout=300s
    
    - name: Verify deployment
      run: |
        kubectl get pods -n langgraph
        kubectl get svc -n langgraph